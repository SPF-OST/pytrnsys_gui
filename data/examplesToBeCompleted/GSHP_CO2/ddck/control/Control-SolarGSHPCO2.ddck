*******************************
**BEGIN Control-SolarCo2IceSlurry.ddck 
**
**Control Ice-Slurry with slurry tank
*******************************
    
*****************************************
** Author: Dani Carbonell        
** Date:  23.04.2018   
** update: 03.05.2022: MS changed mass flow in evaporator loop to be independent of HX 
** size in the ice slurry tank (using real slurry tank type 865) 
** update: 06.02.2023 IGG updated to CO2 (type982 and double circuits for HPCO2)
******************************************

******************************************************************************************
** outputs to energy balance in kWh and ABSOLUTE value
** Following this naming standard : qSysIn_name, qSysOut_name, elSysIn_name, elSysOut_name
******************************************************************************************

********************************
************ HYDRAULIC EXPORT
********************************


EQUATIONS 15
*** Massflowrates
**MfrSeries = 0 !does not exist 
MfrPuSH = MfrBuiRd
MfrsupplyWater = MfrDHWset
!MfrCW= MfrDHWset !IGG NOT USED
!xFracDivHp = NOT(BoAuxWWonRc) !IGG NOT USED
MfrPuCool = 0!MfrPiHxCoolWatIn 
xFracDivSHCool = CoolingOnRc
**xFracMixHxTes = AND(NOT(OR(ProWs,ProPar)),NOT(blockCol)) 
**MfrPuCol = pumpColOn*(ProWs*MfrCPri+MfrCPriNom*(ProCs+ProDoubleHpCs)) !+ProSeries*MfrSeries)
MfrPuCol = 0 !pumpColOn*MfrCPri*(ProWs+ProCs+ProPar+ProDoubleHpCs) !+ProSeries*MfrSeries)

MfrPuDHW =  NOT(GT(MfrDHWset,0))*MfrPuCircNom+GT(MfrDHWset,0)*MfrSrcDHWHXUsed 
MfrPuCirc = NOT(GT(MfrDHWset,0))*MfrPuCircNom
MfrPuHpEvap = MfrHpEvapNom*hpIsOn*OR(HPforSHisNeeded,HPforDHWisNeeded)
**MfrPuHpCond1 = NOT(HPforDHWisNeeded)*MfrHpCond1Nom*hpIsOn*HPforSHisNeeded+ HPforDHWisNeeded*MfrHpCond1Nom*hpIsOn*HPforSHisNeeded*0.5!DC. reduce mass flow rate in SH when parallel
MfrPuHpCond1 = MfrHpCond1Nom*hpIsOn*HPforSHisNeeded
MfrPiHpCondShIn = MfrPuHpCond1 !IGG
MfrPuHpCond2 = MfrHpCond2Nom*hpIsOn*HPforDHWisNeeded !IGG
MfrPiHpCondDhwIn =MfrPuHpCond2 !IGG
*** here allow loading of SH-storage, too! Load Tes_SH xFracDivSolarDhwSh = 1! ???
xFracDivSolarDhwSh = GT(TTesDhwBotRc,TTesShBotRc)*BoHS !AND(AND(GT(TTesDhwBotRc+UdbProWs,TCollExpectedRc),LT(TTesShBotRc, TCollExpectedRc)),BoHS) !AND(AND(GT(T1_Tes1,TCollExpected),LT(TsensorTesSh, TCollExpected)),BoHS)
xFracDivDhw = NOT(GT(MfrDHWset,0))
xFracDivDhwOut = NOT(GT(MfrDHWset,0))

EQUATIONS 15
TTesDhwAuxOff = T8_Tes1
TTesDhwAuxOn  = T9_Tes1
TTesDhwBot = T2_Tes1
TTesShBot = T2_Tes2
**TCollectorOn = MIN(T3_Tes1+UdbProWs,T3_Tes2+UdbProWs)
TProAuxDhwTes = T9_Tes1
TesOverheat = GT(T10_Tes1,Tmax_Tes1)*NOT(TesOverheatRc) + GT(T10_Tes1Rc,Tmax_Tes1-5)*TesOverheatRc
TProWs     = MIN(TTesDhwBotRc,TTesShBotRc)*BoHS + TTesDhwBotRc*NOT(BoHS) !	MIN(TTesDhwAuxOn,TsensorTesSh)*BoHS + TTesDhwAuxOn*NOT(BoHS)  	! 4 Used for ProWs 
TTesSolar = TProWs
TsensorTesSh = T7_Tes2
TPROAUXShTes = T9_Tes2
TdhwSet = TdhwSetProfile
THpCondIn = (THpCondDhwIn + THpCondShIn) / 2.0 !IGG
TPiHpCondShIn = TPiHpCondIn1 !IGG
TPiHpCondDhwIn = TPiHpCondIn2  !IGG
TPiHpToTesDhwIn = THpCondDhwOut ! IGG

**EQUATIONS 1
**MfrPuHxIce = MfrPuCol*(ProCs+ProDoubleHpCs)




********************************
************ TEMPERAING VALVES
********************************

CONSTANTS 3
T_set_DivSH=T_set_d
T_set_MixCirc=TdhwSet
T_set_DivHpEvap=7

EQUATIONS 1
T_set_cool = MIN(Tamb-5,TRdRt)

UNIT 441 TYPE 811 ! Passive Divider for heating 
PARAMETERS 1
5 !Nb.of iterations before fixing the value 
INPUTS 4
TPiTeeMixSHIn 
TPiRadOut
MPiRadOut
T_set_DivSH
*** INITIAL INPUT VALUES
35.0 21.0 800.0 T_set_DivSH
EQUATIONS 1
xFracDivSH_heat =  (1-CoolingOnRC)*(1.-[441,5] )

**UNIT 441 TYPE 811 ! Passive Divider for heating 
**PARAMETERS 1
**5 !Nb.of iterations before fixing the value 
**INPUTS 4 
**TPiDivSHCool
**TPiSHInMix
**MfrPiRadOut
**T_set_DivSH
***** INITIAL INPUT VALUES
**35.0 21.0 800.0 T_set_DivSH
**EQUATIONS 1
**xFracDivSH =  1.-[441,5] 



UNIT 24 TYPE 811    ! Passive Divider for cooling
PARAMETERS 1!2
!4     ! 1 Tempering valve mode
5     ! 2 Nb. of iterations before fixing the value
INPUTS 4
TPiRadOut   ! Heat source temperature, °C
TPiTeeMixSHIn  ! Inlet temperature, °C
MfrPuSH      ! Inlet flow rate, kg/h
T_set_cool     ! Set point temperature, °C
*** INITIAL INPUT VALUES
15.0 21.0 800.0 17.0
EQUATIONS 2
** xFracDivSH_cool = CoolingOn*(1.-[24,5]) !Different convention in TRNSYS
xFracDivSH_cool = CoolingOnRC*([24,5]) 
xFracDivSH = xFracDivSH_heat + xFracDivSH_cool 

**UNIT 443 TYPE 811 ! Passive Divider for heating 
**PARAMETERS 1
**5 !Nb.of iterations before fixing the value 
**INPUTS 4 
**TPiIceToHpRc
**TPiHpEvapMixRc
**MfrPiHpEvapInRc
**T_set_DivHpEvap
***** INITIAL INPUT VALUES
**35.0 21.0 800.0 T_set_DivHpEvap
**EQUATIONS 1
**xFracDivHpEvap =  1.-[443,5] !Dc the heat pump does not accept values above 7 °C

CONSTANTS 1
xFracDivHpEvap = 0
***************************************************
******** Cooling Section***************************
***************************************************

CONSTANTS 2
TPCMCoolStop = 24 ! Stop cooling if TAvgPCM is above this temperature
dTCoolPCM = 1

EQUATIONS 1
CoolingOn = 0! OR(AND(AND(CoolingNeeded,LE(TAvgPCM,TPCMCoolStop+dTCoolPCM)),CoolingOnRc),AND(CoolingNeeded,LE(TAvgPCM,TPCMCoolStop))) !Deadband


EQUATIONS 5
BoAuxWWon = HpForDHWIsNeeded ! JS: Do not block HP during summer (we need it for cooling)
BoAuxSHon = HpForSHIsNeeded ! IGG HpForSHIsNeeded*NOT(BoAuxWWon)*NOT(HpIsBLock) !DC CHANGED TO AVOID RUNNING THE LOOP WITHOUT POWER     ! Auxiliary heater space heating mode, 0/1
HpIsOn = OR(BoAuxWWonRc,BoAuxSHonRc)     ! Auxiliary heater on for DHW or SH, 0/1
pumpColOn = 0!GT([100,9],0.5)   
BlockHp=0




UNIT 63 TYPE 993     ! Input value recall (element RcC)
PARAMETERS 1     
10    ! 1: number of variables to be remembered
**     
INPUTS 10
TesOverheat   T10_Tes1 BoAuxWWon BoAuxSHon TTesDhwBot TTesShBot CoolingOn   Nix Nix Nix
**
0.0  20  0.0 0.0  0.0 0.0 0.0 0.0 0.0 0.0

EQUATIONS 7          ! Recalled values for collector control
TesOverheatRc = [63,1]     ! recalled value of boolean for storage protection, 0/1
T10_Tes1Rc = [63,2]     ! recalled value from upper storage part for storage protection, °C
BoAuxWWonRc = [63,3]     
BoAuxSHonRc  = [63,4]     
TTesDhwBotRc = [63,5]
TTesShBotRc = [63,6]
CoolingOnRc = [63,7]


EQUATIONS 2
qAux1_Tes1 = qAux1_Tes1_nom_kW*auxStoreDHWIsOn
qAux1_Tes2  = qAux1_Tes2_nom_kW*auxStoreSHIsOn! kW


EQUATIONS 2
qAuxStoreDHW_KW = qHeatSource_Tes1
qAuxStoreSH_KW = qHeatSource_Tes2


*****************************************************
*****Online Plotter*******
*****************************************************

UNIT 501 TYPE 65     ! Online Plotter HX
PARAMETERS 12     
10     ! 1 Nb. of left-axis variables
0     ! 2 Nb. of right-axis variables
0     ! 3 Left axis minimum
100     ! 4 Left axis maximum
0     ! 5 Right axis minimum
60     ! 6 Right axis maximum
nPlotsPerSim     ! 7 Number of plots per simulation
12     ! 8 X-axis gridpoints
-1     ! 9 Shut off Online w/o removing
-1     ! 10 Logical unit for output file
0     ! 11 Output file units
0     ! 12 Output file delimiter
INPUTS 10    
CoolingOn CoolingOnRc TProWs TMax_Tes1 T10_Tes1Rc xFracMixHxTes  xFracDivHpEvap Nix
CoolingOn CoolingOnRc TProWs TMax_Tes1 T10_Tes1Rc xFracMixHxTes  xFracDivHpEvap Nix
LABELS  3     
Temperatures  
MassFlows   
Hyd
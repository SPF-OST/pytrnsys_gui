#### process.config file ####

## general processing settings
bool processParallel True
bool processQvsT False
bool cleanModeLatex True
bool forceProcess  True #even if results file exist it proceess the results, otherwise it checks if it exists
bool setPrintDataForGle False
bool forceHourlyYear False # to be used for multi year simulations
bool footerPresent True # to be used if run ended with error, but simulation should still be processed until end of run

int yearReadedInMonthlyFile -1 #-1 means the last year
string firstMonth "July"
int reduceCpu 0

string typeOfProcess "completeFolder"


## Paths
string pathBase "C:\Daten\ongoingProjects\PYTRNSYS\examples\PV_ASHP_SH_DHW-FWM-radFloor"

string latexNames "..\latexNames.json"


## Calculate total values
calc Q_SH = qSysOut_buiDemand_Tot
calc Q_DHW = qSysOut_DhwDemand_Tot
calc Q_yearly = qSysOut_DhwDemand_Tot + qSysOut_buiDemand_Tot
calc E_Hpyearly = elSysOut_HpCompD_Tot
calc Net_E_tot = elSysIn_Grid_Tot - elSysOut_PvToGrid_Tot
calc PV_tot = elSysIn_PV_Tot
calc E_invLoss = elSysOut_InvLoss_Tot
calc E_sys_tot = elSysOut_PuShDemand_Tot + elSysOut_CtrlDemand_Tot + elSysIn_TesShAux_Tot + elSysIn_TesDhwAux_Tot + elSysOut_HpCompD_Tot + elSysOut_InvLoss_Tot
calc El_tot = E_sys_tot + elSysOut_HHDemand_Tot
calc E_use = qSysOut_buiDemand_Tot + qSysOut_DhwDemand_Tot + elSysOut_HHDemand_Tot
calc SPFhp = Q_yearly / E_Hpyearly
calc SPFsys = Q_yearly / (E_sys_tot-elSysOut_InvLoss_Tot) #Inversion losses are not part of SPF



## calculate performance factors
calc R_net_tot = elSysIn_Grid_Tot/(qSysOut_buiDemand_Tot + qSysOut_DhwDemand_Tot + elSysOut_HHDemand_Tot) #grid purchase ratio

## Hourly calculations
calcHourly elSysIn_heating = -elSysOut_CtrlDemand + elSysOut_HpCompD_Tot


## Monthly Calculations
calcMonthly Net_E = elSysIn_Grid - elSysOut_PvToGrid
calcMonthly R_net = elSysIn_Grid/(qSysOut_buiDemand + qSysOut_DhwDemand + elSysOut_HHDemand)
calcMonthly P_tot = qSysOut_buiDemand + qSysOut_DhwDemand


# Additional content of the pdf
#stringArray caseDefinition "TesDhwVol" "TesShVol" "AshpsizeHpUsed" "pvnumModPvRoof" "PV_tot" "Net_E_tot" "PowerPeakPV_kWp"
stringArray caseDefinition "TesDhwVol" "TesShVol" "AshpsizeHpUsed" "PvnumModPvRoof"  "PV_tot" "Net_E_tot"
#"pvPowerPeakPV_kWp" not calculated recursively ?

stringArray addImage "C:\GIT\pytrnsys_gui\data\examples\PvAshpDhwShMfh\PvAshpDhwShMfh.pdf"
stringArray plotT "iso_Troom" "iso_buiTamb"


## Result file
stringArray results "SPFhp" "SPFsys" "E_invLoss" "El_tot" "E_use"  "qSysOut_buiDemand"  "qSysOut_DhwDemand" "TesDhwVol" "TesShVol" "Q_SH"  "Q_DHW"  "Q_yearly"  "E_Hpyearly"  "AshpsizeHpUsed" "PvnumModPvRoof" "Net_E_tot" "PV_tot" "R_net" "R_net_tot" "E_sys_tot" "elSysOut_HHDemand_Tot" "elSysOut_PvToGrid_Tot" "elSysIn_PV_Tot" "elSysIn_Grid_Tot"
## Plots to be generated for bokeh html file
stringArray plotHourly "iso_Troom" "RadFloorPRdIn_KW" "WtTpPdhw_kW" "elSysIn_heating" "elSysIn_Grid" "elSysOut_PvToGrid" "elSysOut_HHDemand"  "elSysOut_InvLoss" "elSysIn_PV"# values to be plotted (hourly)

stringArray plotHourlyQvsT  "qSysOut_buiDemand" "TRadFloor" "qSysOut_buiDemand" "RadFloorTRdFl" "AshpPauxCond_kW" "AshpTEvapOut" "AshpPauxCond_kW" "TAshp"





name: Static checks and unit tests

on:
  push:
    branches: [ v0.10 ]
  pull_request:
    branches: [ v0.10 ]

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install -r requirements/test.txt
      - name: Generate UI code from Qt Creator Studio .ui files
        run: python dev-tools/generateGuiClassesFromQtCreatorStudioUiFiles.py
      - name: Static type checking with mypy
        run: python dev-tools/runStaticChecksAndUnitTests.py --type
      - name: Lint with pylint
        run: python dev-tools/runStaticChecksAndUnitTests.py --lint --keep-results
      - name: Generate class and package diagrams
        run: python dev-tools/runStaticChecksAndUnitTests.py --diagram=dot --keep-results
      - name: Test with pytest
        run: python dev-tools/runStaticChecksAndUnitTests.py --unit="not linux_ci" --keep-results
      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: test-results-and-coverage-report-windows
          path: test-results
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  build-executable:
    needs: [ test ]
    runs-on: windows-latest
    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Set up venv
        run: |
          python -m venv venv
      - name: Install dependencies
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install wheel
          venv\Scripts\pip install -r requirements\release.txt
      - name: Generate UI code from Qt Creator Studio .ui files
        run: |
          venv\Scripts\activate
          python dev-tools\generateGuiClassesFromQtCreatorStudioUiFiles.py
      - name: Build executable
        run: ..\venv\Scripts\pyinstaller pytrnsys-gui.spec
        working-directory: release
      - name: Compute file name
        id: fn
        run: |
          $pytrnsys_gui_sha=$(git rev-parse --short HEAD)
          $(venv\Scripts\pip show pytrnsys | Select-String -Pattern "^Version:.*$").Matches.Value.Split(".")[-1].Substring(0,7)
          $ref_name="${{github.ref_name}}".replace("/","-")
          echo "file_name_base=pytrnsys-gui-${ref_name}-${pytrnsys_gui_sha}-${pytrnsys_sha}" >> $env:GITHUB_OUTPUT
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.fn.outputs.file_name_base}}
          path: |
            data
            venv\pytrnsys_data
            release\dist\pytrnsys-gui.exe

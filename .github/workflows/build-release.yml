name: Build release

on:
  push:
    tags:
      - v*
  workflow_call:
    inputs:
      pytrnsys_ref:
        required: true
        type: string
      pytrnsys_gui_ref:
        required: true
        type: string
      create:
        required: true
        type: string
        
jobs:
  build-release:
    runs-on: [self-hosted, etna]
    
    env:
      PYTRNSYS_REF: ${{ github.event_name == 'workflow_call' && inputs.pytrnsys_ref || 'master' }}
      PYTRNSYS_GUI_REF: ${{ github.event_name == 'workflow_call' && inputs.pytrnsys_gui_ref || github.ref }}
      CREATE: ${{ github.event_name == 'workflow_call' && inputs.create || 'release' }}
      
    defaults:
      run:
        working-directory: build_release/pytrnsys_gui

    steps:
      - uses: actions/checkout@v4
        with:
          repository: SPF-OST/pytrnsys
          ref: ${{inputs.pytrnsys_ref}}
          path: build_release/pytrnsys
          
      - uses: actions/checkout@v4
        with:
          repository: SPF-OST/pytrnsys_gui
          ref: ${{inputs.pytrnsys_gui_ref}}
          path: build_release/pytrnsys_gui
      
      - name: Report github.event_name and event_type
        run: |
          echo "Event name: ${{github.event_name}}"
          echo "Event type (via client payload): ${{github.event.client_payload.type}}"
          echo "Event type (via event_type): ${{github.event.event_type}}"

      - name: Remove old venv
        run: |
          if (Test-Path -LiteralPath venv) {
            Remove-Item -LiteralPath venv -Recurse
          }

      - name: Create virtual environment
        run: py -3.12 -m venv venv
        
      - name: Compute pytrnsys git SHA
        id: sha
        run: |
          $pytrnsys_sha=$(venv\Scripts\python release\getPytrnsysMasterGitSha.py)
          echo "pytrnsys_sha=${pytrnsys_sha}" >> $env:GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install wheel
          venv\Scripts\python -m pip install -r requirements/release.txt
        
      - name: Build executable
        run: venv\Scripts\python dev-tools/devTools.py -r
      
      - name: Compute file name
        id: fn
        run: |
          $pytrnsys_gui_sha=$(git rev-parse --short HEAD)
          $ref_name="${{github.ref_name}}".replace("/","-")
          $date = $(venv\Scripts\python -c "import datetime; print(datetime.datetime.now(datetime.UTC).isoformat(timespec='seconds').replace(':','_'))")
          echo "file_name_base=pytrnsys-gui-${ref_name}-gui_${pytrnsys_gui_sha}-pytrnsys_${{steps.sha.outputs.pytrnsys_sha}}-${date}" >> $env:GITHUB_OUTPUT
      
      - name: Create zip file
        run: mv release\build\pytrnsys.zip ${{steps.fn.outputs.file_name_base}}.zip
      
      - if: inputs.create == 'pre-release'
        name: Release artifacts (bleeding-edge)
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "bleeding-edge"
          prerelease: true
          title: "Development Build"
          # ATTENTION: `action-automatic-releases` *needs* forward slashes in the paths given to `files`.
          files: ${{steps.fn.outputs.file_name_base}}.zip
      
      - if: inputs.create == 'release'
        name: Release artifacts (proper release)
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          title: "Release"
          prerelease: false
          # ATTENTION: `action-automatic-releases` *needs* forward slashes in the paths given to `files`.
          files: ${{steps.fn.outputs.file_name_base}}.zip
          
      - if: inputs.create == 'artifacts'
        name: Upload release as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Release zip
          path: ${{steps.fn.outputs.file_name_base}}.zip

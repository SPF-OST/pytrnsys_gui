name: Run tests and static checks

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
  workflow_call:
    inputs:
      reason:
        required: true
        type: string

env:
  PYTRNSYS_REF: ${{(github.event_name == 'workflow_call' && inputs.reason == 'pytrnsys-changed') && github.ref_name || 'master'}}
  PYTRNSYS_GUI_REF: ${{(github.event_name == 'workflow_call' && inputs.reason == 'pytrnsys-changed') && 'master' || github.ref_name}}
  PY_COLORS: "1"


jobs:    
  developer-install:
    runs-on: [ self-hosted, etna ]
    
#    defaults: 
#      run:
#        working-directory: dev_install/pytrnsys_gui

    steps:
      - name: Report some variable values
        run: |
          echo "GitHub ref: ${{github.ref}}"
          echo "GitHub ref_name: ${{github.ref_name}}"
          echo "GitHub workspace: ${{github.workspace}}"       

      - name: Remove old working directory
#        working-directory: ${{github.workspace}}
        run: |
          if (Test-Path -LiteralPath dev_install) {
            Remove-Item -LiteralPath dev_install -Recurse
          }
          New-Item -Name "dev_install" -ItemType "directory"
          
      - uses: actions/checkout@v4
        with:
          repository: SPF-OST/pytrnsys
          ref: ${{env.PYTRNSYS_REF}}
          path: dev_install/pytrnsys
      
      - uses: actions/checkout@v4
        with:
          repository: SPF-OST/pytrnsys_gui
          ref: ${{env.PYTRNSYS_GUI_REF}}
          path: dev_install/pytrnsys_gui

      - name: Create virtual environment
        run: py -3.12 -m venv venv

      - name: Install dependencies
        run: |
          venv\Scripts\python -m pip install wheel
          venv\Scripts\python -m pip install -r requirements/dev.txt

      - name: Generate UI code from Qt Creator Studio .ui files
        run: venv\Scripts\python dev-tools\generateGuiClassesFromQtCreatorStudioUiFiles.py
        
      - name: Tag install
        run: venv\Scripts\python setup.py egg_info -b dev

      - name: Check that trnsysGUI can be imported
        run: venv\Scripts\python -c "import trnsysGUI"

      - name: Run pip-compile-multi
        run: venv\Scripts\pip-compile-multi -d requirements --no-upgrade

  test:
    runs-on: [self-hosted, etna]

#    defaults: 
#      run:
#        working-directory: test/pytrnsys_gui

    steps:
      - name: Remove old working directory
#        working-directory: ${{github.workspace}}
        run: |
          if (Test-Path -LiteralPath test) {
            Remove-Item -LiteralPath test -Recurse
          }
          New-Item -Name "test" -ItemType "directory"

      
      - uses: actions/checkout@v4
        with:
          repository: SPF-OST/pytrnsys_gui
          ref: ${{env.PYTRNSYS_GUI_REF}}
          path: test/pytrnsys_gui
          
      - name: Add Inkscape to the path
        run: echo "C:\CI-Progams\Inkscape\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create virtual environment
        run: py -3.12 -m venv venv

      - name: Install dependencies
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install wheel
          venv\Scripts\python -m pip install -r requirements/test.txt
          # Override required `pytrnsys` ref
          venv\Scripts\python -m pip install git+https://github.com/SPF-OST/pytrnsys.git@${{env.PYTRNSYS_REF}}

      - name: Generate UI code from Qt Creator Studio .ui files
        run: venv\Scripts\python dev-tools/generateGuiClassesFromQtCreatorStudioUiFiles.py

      - name: Static type checking with mypy
        run: venv\Scripts\python dev-tools/devTools.py --type

      - name: Lint with pylint
        run: venv\Scripts\python dev-tools/devTools.py --lint --keep-results

      - name: Syntax checking with black
        run: venv\Scripts\python dev-tools/devTools.py --black --keep-results

      - name: Generate class and package diagrams
        run: venv\Scripts\python dev-tools/devTools.py --diagram=dot --keep-results

      - name: Test with pytest
        run: venv\Scripts\python dev-tools/devTools.py --unit --keep-results

      - name: Post coverage report to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          path-to-lcov: test-results/coverage.lcov

      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-coverage-report-windows
          path: test-results
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{always()}}

  create-pre-release-for-pytrnsys-gui-push:
    if: ${{github.event_name != 'workflow_call' && github.ref_name == 'master'}}
    name: Build pre-release for change to `pytrnsys_gui` `master`
    needs: test
    uses: ./.github/workflows/build-release.yml
    with:
      pytrnsys_ref: master
      pytrnsys_gui_ref: master
      create: pre-release
          
  create-pre-release-for-pytrnsys-changed:
    if: ${{github.event_name == 'workflow_call' && inputs.reason == 'pytrnsys-changed' && github.ref_name == 'master'}}
    name: Build pre-release for change to `pytrnsys` `master`
    runs-on: [self-hosted, etna]
    needs: test
    steps:
    - uses: peter-evans/repository-dispatch@v3
      with:
        repository: SPF-OST/pytrnsys_gui
        token: ${{secrets.GITHUB_TOKEN}}
        event-type: build-release-pytrnsys-changed
        client-payload: |
          '{
            "pytrnsys_ref": "master",
            "pytrnsys_gui_ref": "master",
            "create": "pre-release",
          }'
          
  build-release-artifacts:
    if: ${{github.ref_name != 'master'}}
    name: Build release artifacts for change to pull request
    needs: test
    uses: ./.github/workflows/build-release.yml
    with:
      pytrnsys_ref: ${{github.event_name == 'workflow_call' && inputs.reason == 'pytrnsys-changed' && github.ref_name || 'master'}}
      pytrnsys_gui_ref: ${{github.event_name == 'workflow_call' && inputs.reason == 'pytrnsys-changed' && 'master' || github.ref_name}}
      create: artifact

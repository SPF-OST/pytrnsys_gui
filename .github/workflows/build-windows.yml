name: Static checks and unit tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: windows-latest
    steps:
    - name: Support longpaths
      run: git config --system core.longpaths true
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel
        pip install -r requirements/test.txt
    - name: Generate UI code from Qt Creator Studio .ui files
      run: python dev-tools/generateGuiClassesFromQtCreatorStudioUiFiles.py
    - name: Static type checking with mypy
      run: python dev-tools/runStaticChecksAndUnitTests.py --type
    - name: Lint with pylint
      run: python dev-tools/runStaticChecksAndUnitTests.py --lint --keep-results
    - name: Generate class and package diagrams
      run: python dev-tools/runStaticChecksAndUnitTests.py --diagram=dot --keep-results
    - name: Test with pytest
      run: python dev-tools/runStaticChecksAndUnitTests.py --unit="not linux_ci" --keep-results
    - name: Upload test results and coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: test-results-and-coverage-report-windows
        path: test-results
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  build-executable:
    needs: [test]
    runs-on: windows-latest
    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install -r requirements\release.txt
      - name: Generate UI code from Qt Creator Studio .ui files
        run: |
          python dev-tools\generateGuiClassesFromQtCreatorStudioUiFiles.py
      - name: Build executable
        run: pyinstaller pytrnsys-gui.spec
        working-directory: release
      - name: Determine output path components
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $env:GITHUB_OUTPUT
          $ref_name="${{github.ref_name}}".replace("/","-")
          echo "ref_name=$ref_name" >> $env:GITHUB_OUTPUT
      - name: Rename executable
        run: Rename-Item -Path release\dist\pytrnsys-gui.exe -NewName pytrnsys-gui-${{steps.vars.outputs.ref_name}}-${{steps.vars.outputs.sha_short}}.exe
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build (${{steps.vars.outputs.ref_name}} / ${{steps.vars.outputs.sha_short}})"
          files: pytrnsys-gui-${{steps.vars.outputs.ref_name}}-${{steps.vars.outputs.sha_short}}.exe

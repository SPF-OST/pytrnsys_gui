name: Static checks and unit tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: windows-latest
    steps:
    - name: Support longpaths
      run: git config --system core.longpaths true
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel
        pip install -r requirements/test.txt
    - name: Generate UI code from Qt Creator Studio .ui files
      run: python dev-tools/generateGuiClassesFromQtCreatorStudioUiFiles.py
    - name: Static type checking with mypy
      run: python dev-tools/runStaticChecksAndUnitTests.py --type
    - name: Lint with pylint
      run: python dev-tools/runStaticChecksAndUnitTests.py --lint --keep-results
    - name: Generate class and package diagrams
      run: python dev-tools/runStaticChecksAndUnitTests.py --diagram=dot --keep-results
    - name: Test with pytest
      run: python dev-tools/runStaticChecksAndUnitTests.py --unit="not linux_ci" --keep-results
    - name: Upload test results and coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: test-results-and-coverage-report-windows
        path: test-results
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  build-executable:
    needs: [test]
    runs-on: [ self-hosted, etzel ]
    defaults:
      run:
        working-directory: release
    steps:
      - uses: actions/checkout@v3
      - name: Delete old virtual environment
        run: Remove-Item -Recurse -ErrorAction Ignore venv
      - name: Create virtual environment
        run: py -3.10 -m venv venv
      - name: Install dependencies
        run: |
          release\venv\Scripts\python -m pip install --upgrade pip
          release\venv\Scripts\python -m pip install wheel
          release\venv\Scripts\pip install -r requirements\release.txt
        working-directory: .
      - name: Generate UI code from Qt Creator Studio .ui files
        run: |
          release\venv\Scripts\activate
          python dev-tools\generateGuiClassesFromQtCreatorStudioUiFiles.py
        working-directory: .
      - name: Delete old build artifacts
        run: Remove-Item -Recurse -ErrorAction Ignore dist, build
      - name: Build executable
        run: venv\Scripts\pyinstaller pytrnsys-gui.spec
      - name: Determine short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $env:GITHUB_OUTPUT
      - name: Rename executable
        run: Rename-Item -Path dist\pytrnsys-gui.exe -NewName dist\pytrnsys-gui-${{github.ref_name}}-${{steps.sha.outputs.sha_short}}.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pytrnsys-gui-${{github.ref_name}}-${{steps.sha.outputs.sha_short}}
          path: release\dist\pytrnsys-gui.exe


name: Static checks and unit tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
  repository_dispatch:
    type: run-tests-and-build-executable

jobs:
  test:
    runs-on: [self-hosted, etzel]
    steps:
      - uses: actions/checkout@v3
      - name: Display the path
        run: echo %PATH%
        shell: cmd
      - name: Add Inkscape to the path
        run: echo "C:\CI-Progams\Inkscape\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
      - name: Display the path AGAIN
        run: echo %PATH%
        shell: cmd
      - name: Remove old venv
        run: |
          if (Test-Path -LiteralPath venv) {
            Remove-Item -LiteralPath venv -Recurse
          }
      - name: Create virtual environment
        run: py -3.9 -m venv venv
      - name: Install dependencies
        run: |
          venv\Scripts\python -m pip install --upgrade pip
          venv\Scripts\python -m pip install wheel
          venv\Scripts\python -m pip install -r requirements/test.txt
      - name: Generate UI code from Qt Creator Studio .ui files
        run: venv\Scripts\python dev-tools/generateGuiClassesFromQtCreatorStudioUiFiles.py
      - name: Static type checking with mypy
        run: venv\Scripts\python dev-tools/devTools.py --type
      - name: Lint with pylint
        run: venv\Scripts\python dev-tools/devTools.py --lint --keep-results
      - name: Syntax checking with black
        run: venv\Scripts\python dev-tools/devTools.py --black --keep-results
      - name: Generate class and package diagrams
        run: venv\Scripts\python dev-tools/devTools.py --diagram=dot --keep-results
      - name: Test with pytest
        run: venv\Scripts\python dev-tools/devTools.py --unit --keep-results
      - name: Post coverage report to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: test-results/coverage.lcov
      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: test-results-and-coverage-report-windows
          path: test-results
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  build-executable:
    needs: [test]
    runs-on: [self-hosted, etzel]
    steps:
      - uses: actions/checkout@v3
      - name: Report github.event_name and event_type
        run: |
          echo "Event name: ${{github.event_name}}"
          echo "Event type (via client payload): ${{github.event.client_payload.type}}"
          echo "Event type (via event_type): ${{github.event.event_type}}"
      - name: Build executable
        run: py -3.9 dev-tools/devTools.py -x
      - name: Compute file name
        id: fn
        run: |
          $pytrnsys_gui_sha=$(git rev-parse --short HEAD)
          $pytrnsys_sha=$(release\pyinstaller-venv\Scripts\pip show pytrnsys | Select-String -Pattern "^Version:.*$").Matches.Value.Split(".")[-1].Substring(0,7)
          $ref_name="${{github.ref_name}}".replace("/","-")
          echo "file_name_base=pytrnsys-gui-${ref_name}-${pytrnsys_gui_sha}-${pytrnsys_sha}" >> $env:GITHUB_OUTPUT
      - name: Create zip file
        if: ${{github.event_name == 'push' || (github.event_name == 'repository_dispatch' && github.event.client_payload.type == 'run-tests-and-build-executable')}}
        run: Compress-Archive -Path data, release\pyinstaller-venv\pytrnsys_data, release\dist\pytrnsys-gui.exe -DestinationPath ${{steps.fn.outputs.file_name_base}}.zip
      - name: Release artifacts
        if: ${{github.event_name == 'push' || (github.event_name == 'repository_dispatch' && github.event.client_payload.type == 'run-tests-and-build-executable')}}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "bleeding-edge"
          prerelease: true
          title: "Development Build"
          # ATTENTION: `action-automatic-releases` *needs* forward slashes in the paths given to `files`.
          files: ${{steps.fn.outputs.file_name_base}}.zip
      - name: Upload artifacts
        if: ${{github.event_name == 'pull_request'}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.fn.outputs.file_name_base}}
          path: |
            data
            release\pyinstaller-venv\pytrnsys_data
            release\dist\pytrnsys-gui.exe
